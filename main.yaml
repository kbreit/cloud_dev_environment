- name: Create Droplet in Digital Ocean
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - include_vars:
        file: vars
    # - name: Query one tag
    #   digital_ocean_tag_facts:
    #     oauth_token: '{{do_api_token}}'
    #     tag_name: development
    #   register: one_tag
    - set_fact:
        # dev_droplet_id: '{{one_tag.data.resources.droplets.last_tagged.id}}'
        droplet_exists: yes
      # when: one_tag.data.resources.count == 1
    - include_role:
        name: droplet
    - include_role:
        name: route53
      when: droplet_ip is defined
    - add_host:
        name: "{{fqdn}}"
        groups: do
      changed_when: False
      when: fqdn is defined
    - add_host:
        name: "{{aws_record}}.{{aws_zone}}"
        groups: do
      changed_when: False
      when: fqdn is not defined

- name: Provision development droplet
  hosts: do
  remote_user: root
  gather_facts: False
  vars:
    ansible_ssh_private_key_file: "{{lookup('file', ssh_key_path)}}"
  pre_tasks:
    - name: Wait for port 22 to become available
      local_action: "wait_for port=22 host={{inventory_hostname}}"
    - name: 'Install Python'
      raw: apt-get -y install python
  tasks:
    - include_vars:
        file: vars
    - name: Create user
      user:
        name: "{{username}}"
        shell: /bin/bash
        createhome: yes
      register: create_user
    - name: Create .ssh directory
      file:
        path: "~{{username}}/.ssh"
        state: directory
        owner: "{{username}}"
        group: "{{username}}"
        mode: 0700
      when: create_user.changed == True
    - name: Upload SSH key
      copy:
        src: "{{ssh_key_path}}"
        dest: "~{{username}}/.ssh"
        owner: "{{username}}"
        group: "{{username}}"
        mode: 0700
      when: create_user.changed == True
    - name: Upload SSH public key
      copy:
        src: "{{public_key_file}}"
        dest: "~{{username}}/.ssh"
        owner: "{{username}}"
        group: "{{username}}"
        mode: 0700
      become_user: '{{username}}'
      when: create_user.changed == True
    - name: Create authorized key file
      authorized_key:
        user: kbreit
        state: present
        key: "{{lookup('file', public_key_file)}}"
      become_user: '{{username}}'
      when: create_user.changed == True
    - name: Create wheel group for sudo
      group:
        name: wheel
        state: present
      when: create_user.changed == True
    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: "^%wheel"
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
      when: create_user.changed == True
    - name: Add user to wheel group
      user:
        name: '{{username}}'
        groups: wheel
        append: yes
        state: present
      when: create_user.changed == True
    - name: Install apt Python libraries
      command: apt-get -y install python-apt python3-apt
    - name: Install programs
      apt:
        state: present
        name: "{{packages}}"
      vars:
        packages:
          - tmux
          - git
          - vim
          - make
          - build-essential
          - libssl-dev
          - zlib1g-dev
          - libbz2-dev
          - libreadline-dev
          - libsqlite3-dev
          - wget
          - curl
          - libncurses5-dev
          - libncursesw5-dev
          - xz-utils
          - libffi-dev
          - liblzma-dev
          - ansible
- name: Provision development environment as user
  hosts: do
  remote_user: '{{username}}'
  gather_facts: False
  vars_files:
    - vars
  vars:
    ansible_ssh_private_key_file: "{{lookup('file', ssh_key_path)}}"
  tasks:
    - name: Start ssh-agent
      shell: |
        eval `ssh-agent -s`
        ssh-add
        exit 0
    - name: Create directory
      file:
        path: ~/projects
        state: directory
    - name: Clone git repositories
      git:
        dest: "~{{username}}/projects/{{item.name}}"
        repo: "{{item.repo}}"
        accept_hostkey: yes
        key_file: "~/.ssh/{{private_key_name}}"
      loop:
        - {name: 'ansible-playbook', repo: 'git@github.com:kbreit/ansible-playbooks.git'}
        - {name: 'ansible', repo: 'git@github.com:kbreit/ansible.git'}
        - {name: 'cloud_dev_environment', repo: 'git@github.com:kbreit/cloud_dev_environment.git'}
      register: git_clone
    - name: Add git remote for Ansible
      command: git -C ~/projects/ansible/ remote add upstream git@github.com:ansible/ansible.git
      when: git_clone.changed == True
    - name: Install pyenv
      shell: curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
    - name: Add pyenv information to .bashrc
      lineinfile:  # This could be changed to blockinfile
        dest: ~/.bashrc
        state: present
        regexp: '{{item.regexp}}'
        line: '{{item.line}}'
      loop:
        - { line: 'export PATH="/home/{{username}}/.pyenv/bin:$PATH"', regexp: '{{username}}/.pyenv'}
        - { line: 'eval "$(pyenv init -)"', regexp: 'pyenv init'}
        - { line: 'eval "$(pyenv virtualenv-init -)"', regexp: 'virtualenv-init'}